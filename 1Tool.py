import base64
b= (b'''import os
import sys
############################################
os.system('clear')
os.system('pkg install figlet -y')
os.system('clear')
print ('\033[1;33m')
os.system('figlet 1Tool Bodo')
############################################
print ('\033[1;32m1- MetaSploit')
print ('\033[1;32m2- Optiva')
print ('\033[1;32m3- A-Rat')
print ('\033[1;32m4- Spammer-Grab-1')
print ('\033[1;32m5- Important pkgs')
print ('\033[1;32m6- Linux')
print ('\033[1;32m7- V7x-Tool')
print ('\033[1;32m8- Tool-X')
print ('\033[1;32m9- V7x-Fishing 2')
print ('\033[1;32m10-Ip-Tracer')
############################################
M=int(input(''))
############################################
if M==1:
    print ('\033[1;32m11-install Meta')
    print ('\033[1;32m12-Update Meta')
    print ('\033[1;32m13-remove Meta')
    me=int(input(''))
    if me==11:
        os.system('pkg install unstable-repo')
        os.system('pkg install metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==12:
        os.system('pkg update metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==13:
        os.system('pkg remove metasploit')      
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
###############################################
if M==2:
    os.system('git clone https://github.com/joker25000/Optiva-Framework.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==3:
    os.system('git clone https://github.com/Xi4u7/A-Rat.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==4:
    os.system('git clone https://github.com/p4kl0nc4t/Spammer-Grab.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==5:
    os.system('pkg update')
    os.system('pkg upgrade')
    os.system('pkg install unzip nano ruby perl curl clang python python2 python3 git nmap')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==6:
    print ('1-Kali Nethunter')
    print ('2-BackBox')
    print ('3-Ubuntu')
    la=int(input(''))
    if la==1:
        os.system('wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==2:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/BackBox/backbox.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==3:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
if M==7:
    os.system('git clone https://github.com/Vairous7x/V7x-Tool.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==8:
    os.system('git clone https://github.com/rajkumardusad/Tool-X.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==9:
    os.system('git clone https://github.com/Vairous7x/V7x-Fishing2.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==10:
    os.system('git clone https://github.com/rajkumardusad/IP-Tracer.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==1:
    print ('\033[1;32m11-install Meta')
    print ('\033[1;32m12-Update Meta')
    print ('\033[1;32m13-remove Meta')
    me=int(input(''))
    if me==11:
        os.system('pkg install unstable-repo')
        os.system('pkg install metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==12:
        os.system('pkg update metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==13:
        os.system('pkg remove metasploit')      
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
###############################################
if M==2:
    os.system('git clone https://github.com/joker25000/Optiva-Framework.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==3:
    os.system('git clone https://github.com/Xi4u7/A-Rat.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==4:
    os.system('git clone https://github.com/p4kl0nc4t/Spammer-Grab.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==5:
    os.system('pkg update')
    os.system('pkg upgrade')
    os.system('pkg install unzip nano ruby perl curl clang python python2 python3 git nmap')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==6:
    print ('1-Kali Nethunter')
    print ('2-BackBox')
    print ('3-Ubuntu')
    la=int(input(''))
    if la==1:
        os.system('wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==2:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/BackBox/backbox.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==3:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
if M==7:
    os.system('git clone https://github.com/Vairous7x/V7x-Tool.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==8:
    os.system('git clone https://github.com/rajkumardusad/Tool-X.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==9:
    os.system('git clone https://github.com/Vairous7x/V7x-Fishing2.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==10:
    os.system('git clone https://github.com/rajkumardusad/IP-Tracer.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==1:
    print ('\033[1;32m11-install Meta')
    print ('\033[1;32m12-Update Meta')
    print ('\033[1;32m13-remove Meta')
    me=int(input(''))
    if me==11:
        os.system('pkg install unstable-repo')
        os.system('pkg install metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==12:
        os.system('pkg update metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==13:
        os.system('pkg remove metasploit')      
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
###############################################
if M==2:
    os.system('git clone https://github.com/joker25000/Optiva-Framework.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==3:
    os.system('git clone https://github.com/Xi4u7/A-Rat.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==4:
    os.system('git clone https://github.com/p4kl0nc4t/Spammer-Grab.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==5:
    os.system('pkg update')
    os.system('pkg upgrade')
    os.system('pkg install unzip nano ruby perl curl clang python python2 python3 git nmap')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==6:
    print ('1-Kali Nethunter')
    print ('2-BackBox')
    print ('3-Ubuntu')
    la=int(input(''))
    if la==1:
        os.system('wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==2:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/BackBox/backbox.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==3:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
if M==7:
    os.system('git clone https://github.com/Vairous7x/V7x-Tool.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==8:
    os.system('git clone https://github.com/rajkumardusad/Tool-X.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==9:
    os.system('git clone https://github.com/Vairous7x/V7x-Fishing2.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==10:
    os.system('git clone https://github.com/rajkumardusad/IP-Tracer.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==1:
    print ('\033[1;32m11-install Meta')
    print ('\033[1;32m12-Update Meta')
    print ('\033[1;32m13-remove Meta')
    me=int(input(''))
    if me==11:
        os.system('pkg install unstable-repo')
        os.system('pkg install metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==12:
        os.system('pkg update metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==13:
        os.system('pkg remove metasploit')      
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
###############################################
if M==2:
    os.system('git clone https://github.com/joker25000/Optiva-Framework.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==3:
    os.system('git clone https://github.com/Xi4u7/A-Rat.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==4:
    os.system('git clone https://github.com/p4kl0nc4t/Spammer-Grab.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==5:
    os.system('pkg update')
    os.system('pkg upgrade')
    os.system('pkg install unzip nano ruby perl curl clang python python2 python3 git nmap')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==6:
    print ('1-Kali Nethunter')
    print ('2-BackBox')
    print ('3-Ubuntu')
    la=int(input(''))
    if la==1:
        os.system('wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==2:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/BackBox/backbox.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==3:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
if M==7:
    os.system('git clone https://github.com/Vairous7x/V7x-Tool.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==8:
    os.system('git clone https://github.com/rajkumardusad/Tool-X.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==9:
    os.system('git clone https://github.com/Vairous7x/V7x-Fishing2.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==10:
    os.system('git clone https://github.com/rajkumardusad/IP-Tracer.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==1:
    print ('\033[1;32m11-install Meta')
    print ('\033[1;32m12-Update Meta')
    print ('\033[1;32m13-remove Meta')
    me=int(input(''))
    if me==11:
        os.system('pkg install unstable-repo')
        os.system('pkg install metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==12:
        os.system('pkg update metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==13:
        os.system('pkg remove metasploit')      
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
###############################################
if M==2:
    os.system('git clone https://github.com/joker25000/Optiva-Framework.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==3:
    os.system('git clone https://github.com/Xi4u7/A-Rat.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==4:
    os.system('git clone https://github.com/p4kl0nc4t/Spammer-Grab.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==5:
    os.system('pkg update')
    os.system('pkg upgrade')
    os.system('pkg install unzip nano ruby perl curl clang python python2 python3 git nmap')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==6:
    print ('1-Kali Nethunter')
    print ('2-BackBox')
    print ('3-Ubuntu')
    la=int(input(''))
    if la==1:
        os.system('wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==2:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/BackBox/backbox.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==3:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
if M==7:
    os.system('git clone https://github.com/Vairous7x/V7x-Tool.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==8:
    os.system('git clone https://github.com/rajkumardusad/Tool-X.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==9:
    os.system('git clone https://github.com/Vairous7x/V7x-Fishing2.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==10:
    os.system('git clone https://github.com/rajkumardusad/IP-Tracer.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==1:
    print ('\033[1;32m11-install Meta')
    print ('\033[1;32m12-Update Meta')
    print ('\033[1;32m13-remove Meta')
    me=int(input(''))
    if me==11:
        os.system('pkg install unstable-repo')
        os.system('pkg install metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==12:
        os.system('pkg update metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==13:
        os.system('pkg remove metasploit')      
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
###############################################
if M==2:
    os.system('git clone https://github.com/joker25000/Optiva-Framework.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==3:
    os.system('git clone https://github.com/Xi4u7/A-Rat.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==4:
    os.system('git clone https://github.com/p4kl0nc4t/Spammer-Grab.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==5:
    os.system('pkg update')
    os.system('pkg upgrade')
    os.system('pkg install unzip nano ruby perl curl clang python python2 python3 git nmap')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==6:
    print ('1-Kali Nethunter')
    print ('2-BackBox')
    print ('3-Ubuntu')
    la=int(input(''))
    if la==1:
        os.system('wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==2:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/BackBox/backbox.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==3:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
if M==7:
    os.system('git clone https://github.com/Vairous7x/V7x-Tool.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==8:
    os.system('git clone https://github.com/rajkumardusad/Tool-X.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==9:
    os.system('git clone https://github.com/Vairous7x/V7x-Fishing2.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==10:
    os.system('git clone https://github.com/rajkumardusad/IP-Tracer.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==1:
    print ('\033[1;32m11-install Meta')
    print ('\033[1;32m12-Update Meta')
    print ('\033[1;32m13-remove Meta')
    me=int(input(''))
    if me==11:
        os.system('pkg install unstable-repo')
        os.system('pkg install metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==12:
        os.system('pkg update metasploit')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if me==13:
        os.system('pkg remove metasploit')      
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
###############################################
if M==2:
    os.system('git clone https://github.com/joker25000/Optiva-Framework.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==3:
    os.system('git clone https://github.com/Xi4u7/A-Rat.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==4:
    os.system('git clone https://github.com/p4kl0nc4t/Spammer-Grab.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==5:
    os.system('pkg update')
    os.system('pkg upgrade')
    os.system('pkg install unzip nano ruby perl curl clang python python2 python3 git nmap')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==6:
    print ('1-Kali Nethunter')
    print ('2-BackBox')
    print ('3-Ubuntu')
    la=int(input(''))
    if la==1:
        os.system('wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==2:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/BackBox/backbox.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
    if la==3:
        os.system('pkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh')
        print ('\033[1;33m99 main')
        ma=int(input(''))
        if ma==99:
            os.system('clear')
            os.system('figlet 1Tool Bodo')
            print ('\033[1;32m1- MetaSploit')
            print ('\033[1;32m2- Optiva')
            print ('\033[1;32m3- A-Rat')
            print ('\033[1;32m4- Spammer-Grab-1')
            print ('\033[1;32m5- Important pkgs')
            print ('\033[1;32m6- Linux')
            print ('\033[1;32m7- V7x-Tool')
            print ('\033[1;32m8- Tool-X')
            print ('\033[1;32m9- V7x-Fishing 2')
            print ('\033[1;32m10-Ip-Tracer')
            M=int(input(''))
if M==7:
    os.system('git clone https://github.com/Vairous7x/V7x-Tool.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==8:
    os.system('git clone https://github.com/rajkumardusad/Tool-X.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==9:
    os.system('git clone https://github.com/Vairous7x/V7x-Fishing2.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        M=int(input(''))
if M==10:
    os.system('git clone https://github.com/rajkumardusad/IP-Tracer.git')
    print ('\033[1;33m99 main')
    ma=int(input(''))
    if ma==99:
        os.system('clear')
        os.system('figlet 1Tool Bodo')
        print ('\033[1;32m1- MetaSploit')
        print ('\033[1;32m2- Optiva')
        print ('\033[1;32m3- A-Rat')
        print ('\033[1;32m4- Spammer-Grab-1')
        print ('\033[1;32m5- Important pkgs')
        print ('\033[1;32m6- Linux')
        print ('\033[1;32m7- V7x-Tool')
        print ('\033[1;32m8- Tool-X')
        print ('\033[1;32m9- V7x-Fishing 2')
        print ('\033[1;32m10-Ip-Tracer')
        os.system('python 1Tool.py')


''')
exec (base64.b64decode(b))

